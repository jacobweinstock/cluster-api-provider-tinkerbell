version: '3'

vars:
  KIND_KUBECONFIG_NAME: kind.kubeconfig

includes:
  vbmc: ./Taskfile-vbmc.yaml
  capi: ./Taskfile-capi.yaml

tasks:
  playground:
    silent: true
    summary: |
      Create the CAPT playground.
    cmds:
      - task: validate-deps
      - task: output-dir
      - task: kind-cluster
      - task: deploy-tinkerbell-helm-chart
      - task: vbmc:start-server
      - task: create-hardware-cr
      - task: create-bmc-machine-cr
      - task: create-bmc-secret
      - task: create-vms
      - task: vbmc:start-vbmcs
      - task: apply-bmc-secret
      - task: apply-bmc-machines
      - task: apply-hardware
      - task: capi:create-cluster-yaml
      - task: capi:init
      - task: capi:generate-cluster-yaml
      - task: capi:create-kustomize-file
      - task: capi:apply-kustomization

  validate-deps:
    summary: |
      Validate all required dependencies for the CAPT playground.
    silent: true
    cmds:
      - for: ['docker', 'kind', "virt-install", "yq", "kubectl"]
        cmd: command -v {{.ITEM}} >/dev/null || echo "'{{.ITEM}}' was not found in the \$PATH, please ensure it is installed."

  output-dir:
    summary: |
      Create the output directory.
    silent: true
    cmds:
      - mkdir -p output/{yaml,}

  kind-cluster:
    deps: [validate-deps, output-dir]
    summary: |
      Install a KinD cluster.
    silent: true
    env:
      KUBECONFIG: ./output/{{.KIND_KUBECONFIG_NAME}}
    cmds:
      - kind create cluster --name capt-playground --kubeconfig ./output/{{.KIND_KUBECONFIG_NAME}}
      - kubectl wait --for=condition=ready node --all --timeout=5m
    status:
      - kind get clusters | grep -q capt-playground

  create-hardware-cr:
    deps: [validate-deps, vbmc:start-server]
    silent: true
    summary: |
      Create BMC Machine object.
    vars:
      KIND_GATEWAY_IP:
        sh: docker inspect -f '{{`{{ .NetworkSettings.Networks.kind.Gateway }}`}}' capt-playground-control-plane
      NODE_IP_BASE:
        sh: awk -F"." '{print $1"."$2".10.20"}' <<< "{{.KIND_GATEWAY_IP}}"
    cmds:
      - ./scripts/generate_hardware.sh "$NUM_CONTROL_PLANE_NODES" "$NUM_WORKER_NODES" "$NUM_SPARE_NODES" "{{.KIND_GATEWAY_IP}}" "{{.NODE_IP_BASE}}" output true

  create-bmc-machine-cr:
    deps: [validate-deps, vbmc:start-server, create-hardware-cr]
    silent: true
    summary: |
      Create BMC Machine objects.
    vars:
      VBMC_IP:
        sh: docker inspect -f '{{`{{ .NetworkSettings.Networks.kind.IPAddress }}`}}' virtualbmc
    cmds:
      - ./scripts/generate_bmc.sh "$((NUM_CONTROL_PLANE_NODES + NUM_WORKER_NODES + NUM_SPARE_NODES))" 6230 "{{.VBMC_IP}}" tink-system output true

  create-bmc-secret:
    deps: [validate-deps, create-bmc-machine-cr]
    silent: true
    summary: |
      Create BMC Machine objects.
    cmds:
      - ./scripts/generate_secret.sh output tink-system admin password

  deploy-tinkerbell-helm-chart:
    deps: [validate-deps, kind-cluster]
    silent: true
    sumary: |
      Deploy the Tinkerbell Helm chart.
    env:
      KUBECONFIG: ./output/{{.KIND_KUBECONFIG_NAME}}
      STACK_CHART_VERSION: 0.4.4
    vars:
      KUBECONFIG: ./output/{{.KIND_KUBECONFIG_NAME}}
      KIND_GATEWAY_IP:
        sh: docker inspect -f '{{`{{ .NetworkSettings.Networks.kind.Gateway }}`}}' capt-playground-control-plane
      LB_IP:
        sh: awk -F"." '{print $1"."$2".10.200"}' <<< "{{.KIND_GATEWAY_IP}}"
      TRUSTED_PROXIES:
        sh: KUBECONFIG={{.KUBECONFIG}} kubectl get nodes -o jsonpath='{.items[*].spec.podCIDR}'
    cmds:
      - helm install tink-stack oci://ghcr.io/tinkerbell/charts/stack --version "$STACK_CHART_VERSION" --create-namespace --namespace tink-system --wait --set "smee.trustedProxies={{.TRUSTED_PROXIES}}" --set "hegel.trustedProxies={{.TRUSTED_PROXIES}}" --set "stack.loadBalancerIP={{.LB_IP}}" --set "smee.publicIP={{.LB_IP}}"
    status:
      - helm list -n tink-system | grep -q tink-stack

  create-vms:
    deps: [validate-deps, kind-cluster]
    silent: true
    summary: |
      Create VMs.
    vars:
      KIND_BRIDGE:
        sh: network_id=$(docker network inspect -f '{{`{{.Id}}`}}`' kind);bridge_name="br-${network_id:0:12}";echo $bridge_name
    cmds:
      - ./scripts/create_vms.sh "{{.KIND_BRIDGE}}" output
    status:
      - expected=$((NUM_CONTROL_PLANE_NODES + NUM_WORKER_NODES + NUM_SPARE_NODES)); got=$(virsh --connect qemu:///system list --all --name |grep -ce "node*"); [[ "$got" == "$expected" ]]

  apply-bmc-secret:
    deps: [validate-deps, create-bmc-secret]
    silent: true
    summary: |
      Apply the BMC secret.
    env:
      KUBECONFIG: ./output/{{.KIND_KUBECONFIG_NAME}}
    cmds:
      - kubectl apply -f output/bmc-secret.yaml
    status:
      - kubectl get secret bmc-creds -n tink-system

  apply-bmc-machines:
    deps: [validate-deps, create-bmc-machine-cr]
    #silent: true
    summary: |
      Apply the BMC machines.
    vars:
      BMCS:
        sh: find ./output -type f -name 'bmc-machine-node*.yaml'
    env:
      KUBECONFIG: ./output/{{.KIND_KUBECONFIG_NAME}}
    cmds:
      - for: { var: BMCS }
        cmd: kubectl apply -f {{.ITEM}}
    status:
      - expected=$((NUM_CONTROL_PLANE_NODES + NUM_WORKER_NODES + NUM_SPARE_NODES)); got=$(kubectl get machines.bmc -n tink-system | grep -ce "bmc-node*"); [[ "$got" == "$expected" ]]

  apply-hardware:
    deps: [validate-deps, create-hardware-cr]
    summary: |
      Apply the hardware.
    vars:
      HARDWARE:
        sh: find ./output -type f -name 'hardware-node*.yaml'
    env:
      KUBECONFIG: ./output/{{.KIND_KUBECONFIG_NAME}}
    cmds:
      - for: { var: HARDWARE }
        cmd: kubectl apply -f {{.ITEM}}
    status:
      - expected=$((NUM_CONTROL_PLANE_NODES + NUM_WORKER_NODES + NUM_SPARE_NODES)); got=$(kubectl get hardware -n tink-system | grep -ce "node*"); [[ "$got" == "$expected" ]]

  foo:
    vars:
      BMCS:
        sh: find ./output -type f -name 'bmc-machine-node*.yaml'
        #sh: echo "$((NUM_CONTROL_PLANE_NODES + NUM_WORKER_NODES + NUM_SPARE_NODES))"
      #CONTROL_PLANE_NODES: 1
      #WORKER_NODES: 2
      #RANGE: '{{seq .TOTAL_HARDWARE | replace " " ","}}'
      #KIND_GATEWAY_IP:
      #  sh: docker inspect -f '{{`{{ .NetworkSettings.Networks.kind.Gateway }}`}}' capt-playground-control-plane
      #NODE_IP_BASE:
      #  sh: awk -F"." '{print $1"."$2".10.20"}' <<< "{{.KIND_GATEWAY_IP}}"
      #KIND_BRIDGE:
      #  sh:  network_id=$(docker network inspect -f '{{`{{.Id}}`}}`' kind);bridge_name="br-${network_id:0:12}";echo $bridge_name
    cmds:
      - echo "$(echo "{{.BMCS}}" | wc -l)"
      #- for: sources
      #  cmd: cat {{.ITEM}}
      #- echo "{{.KIND_BRIDGE}}"
      #- for: { var: RANGE, split: ',' }
      #  cmd: echo {{.ITEM}}
      #- for: { var: RANGE, split: ',' }
      #  cmd: echo {{.NODE_IP_BASE}}{{.ITEM}} {{.KIND_GATEWAY_IP}} node{{.ITEM}}; echo node{{.ITEM}}|md5sum|sed 's/^\(..\)\(..\)\(..\)\(..\)\(..\).*$/02:\1:\2:\3:\4:\5/'
