version: '3'

vars:
  KIND_KUBECONFIG_NAME: kind.kubeconfig

tasks:
  playground:
    silent: true
    summary: |
      Create the CAPT playground.
    cmds:
      - task: validate-deps
      - task: output-dir
      - task: kind-cluster
      - task: deploy-tinkerbell-helm-chart
      - task: start-virtualbmc
      - task: hardware-cr
      - task: bmc-machine-cr
      - task: bmc-secret

  validate-deps:
    summary: |
      Validate all required dependencies for the CAPT playground.
    silent: true
    cmds:
      - for: ['docker', 'kind']
        cmd: command -v {{.ITEM}} >/dev/null || echo "'{{.ITEM}}' was not found in the \$PATH, please ensure it is installed."

  output-dir:
    summary: |
      Create the output directory.
    silent: true
    cmds:
      - mkdir -p output/{yaml,}

  kind-cluster:
    deps: [validate-deps, output-dir]
    summary: |
      Install a KinD cluster.
    silent: true
    cmds:
      - kind create cluster --name capt-playground --kubeconfig ./output/{{.KIND_KUBECONFIG_NAME}}
    status:
      - kind get clusters | grep -q capt-playground

  start-virtualbmc:
    deps: [validate-deps, kind-cluster]
    silent: true
    summary: |
      Start the virtualbmc server.
    cmds:
      - docker run -d --rm --network kind -v /var/run/libvirt/libvirt-sock-ro:/var/run/libvirt/libvirt-sock-ro -v /var/run/libvirt/libvirt-sock:/var/run/libvirt/libvirt-sock --name virtualbmc ghcr.io/jacobweinstock/virtualbmc
    status:
      - docker ps | grep -q virtualbmc

  hardware-cr:
    deps: [validate-deps, start-virtualbmc]
    silent: true
    summary: |
      Create BMC Machine object.
    vars:
      KIND_GATEWAY_IP:
        sh: docker inspect -f '{{`{{ .NetworkSettings.Networks.kind.Gateway }}`}}' capt-playground-control-plane
      NODE_IP_BASE:
        sh: awk -F"." '{print $1"."$2".10.20"}' <<< "{{.KIND_GATEWAY_IP}}"
    cmds:
      - ./scripts/generate_hardware.sh "$NUM_CONTROL_PLANE_NODES" "$NUM_WORKER_NODES" "$NUM_SPARE_NODES" "{{.KIND_GATEWAY_IP}}" "{{.NODE_IP_BASE}}" output true

  bmc-machine-cr:
    deps: [validate-deps, start-virtualbmc, hardware-cr]
    silent: true
    summary: |
      Create BMC Machine objects.
    vars:
      VBMC_IP:
        sh: docker inspect -f '{{`{{ .NetworkSettings.Networks.kind.IPAddress }}`}}' virtualbmc
    cmds:
      - ./scripts/generate_bmc.sh "$((NUM_CONTROL_PLANE_NODES + NUM_WORKER_NODES + NUM_SPARE_NODES))" 6230 "{{.VBMC_IP}}" tink-system output true

  bmc-secret:
    deps: [validate-deps, bmc-machine-cr]
    silent: true
    summary: |
      Create BMC Machine objects.
    cmds:
      - ./scripts/generate_secret.sh output tink-system admin password

  deploy-tinkerbell-helm-chart:
    deps: [validate-deps, kind-cluster]
    silent: true
    summary: |
      Deploy the Tinkerbell Helm chart.
    env:
      KUBECONFIG: ./output/{{.KIND_KUBECONFIG_NAME}}
      STACK_CHART_VERSION: 0.4.4
    vars:
      KUBECONFIG: ./output/{{.KIND_KUBECONFIG_NAME}}
      KIND_GATEWAY_IP:
        sh: docker inspect -f '{{`{{ .NetworkSettings.Networks.kind.Gateway }}`}}' capt-playground-control-plane
      LB_IP:
        sh: awk -F"." '{print $1"."$2".10.200"}' <<< "{{.KIND_GATEWAY_IP}}"
      TRUSTED_PROXIES:
        sh: KUBECONFIG={{.KUBECONFIG}} kubectl get nodes -o jsonpath='{.items[*].spec.podCIDR}'
    cmds:
      - helm install tink-stack oci://ghcr.io/tinkerbell/charts/stack --version "$STACK_CHART_VERSION" --create-namespace --namespace tink-system --wait --set "smee.trustedProxies={{.TRUSTED_PROXIES}}" --set "hegel.trustedProxies={{.TRUSTED_PROXIES}}" --set "stack.loadBalancerIP={{.LB_IP}}" --set "smee.publicIP={{.LB_IP}}"
    status:
      - helm list -n tink-system | grep -q tink-stack



  foo:
    vars:
      TOTAL_HARDWARE: 3
      CONTROL_PLANE_NODES: 1
      WORKER_NODES: 2
      RANGE: '{{seq .TOTAL_HARDWARE | replace " " ","}}'
      KIND_GATEWAY_IP:
        sh: docker inspect -f '{{`{{ .NetworkSettings.Networks.kind.Gateway }}`}}' capt-playground-control-plane
      NODE_IP_BASE:
        sh: awk -F"." '{print $1"."$2".10.20"}' <<< "{{.KIND_GATEWAY_IP}}"
    cmds:
      - for: { var: RANGE, split: ',' }
        cmd: echo {{.ITEM}}
      - for: { var: RANGE, split: ',' }
        cmd: echo {{.NODE_IP_BASE}}{{.ITEM}} {{.KIND_GATEWAY_IP}} node{{.ITEM}}; echo node{{.ITEM}}|md5sum|sed 's/^\(..\)\(..\)\(..\)\(..\)\(..\).*$/02:\1:\2:\3:\4:\5/'
