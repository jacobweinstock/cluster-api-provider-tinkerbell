version: '3'

tasks:

  start-server:
    run: once
    summary: |
      Start the virtualbmc server. Requires the "kind" docker network to exist.
    vars:
      VBMC_CONTAINER_NAME:
        sh: yq eval '.virtualBMC.containerName' {{.STATE_FILE_FQ_PATH}}
      VBMC_CONTAINER_IMAGE:
        sh: yq eval '.virtualBMC.image' {{.STATE_FILE_FQ_PATH}}
    cmds:
      - docker run -d --privileged --rm --network kind -v /var/run/libvirt/libvirt-sock-ro:/var/run/libvirt/libvirt-sock-ro -v /var/run/libvirt/libvirt-sock:/var/run/libvirt/libvirt-sock --name {{.VBMC_CONTAINER_NAME}} {{.VBMC_CONTAINER_IMAGE}}
    status:
      - docker ps | grep -q {{.VBMC_CONTAINER_NAME}}

  start-vbmcs:
    run: once
    deps: [start-server]
    summary: |
      Register and start the virtualbmc servers. Requires that the virtual machines exist.
    vars:
      VBMC_NAME:
        sh: yq e '.virtualBMC.containerName' {{.STATE_FILE_FQ_PATH}}
    cmds:
      - ./scripts/virtualbmc.sh {{.STATE_FILE_FQ_PATH}}
    status:
      - expected=$(yq e '.totalNodes' {{.STATE_FILE_FQ_PATH}}); got=$(docker exec {{.VBMC_NAME}} vbmc list | grep -c "running" || :); [[ "$got" == "$expected" ]]
  
  update-state:
    run: once
    deps: [start-server]
    summary: |
      Update the state file with the virtual bmc server information.
    vars:
      VBMC_CONTAINER_NAME:
        sh: yq eval '.virtualBMC.containerName' {{.STATE_FILE_FQ_PATH}}
    cmds:
      - vbmc_ip=$(docker inspect -f '{{`{{ .NetworkSettings.Networks.kind.IPAddress }}`}}' {{.VBMC_CONTAINER_NAME}}); yq e -i '.virtualBMC.ip = "'$vbmc_ip'"' {{.STATE_FILE_FQ_PATH}}
    status:
      - vbmc_ip=$(docker inspect -f '{{`{{ .NetworkSettings.Networks.kind.IPAddress }}`}}' {{.VBMC_CONTAINER_NAME}}); [[ "$(yq eval '.virtualBMC.ip' {{.STATE_FILE_FQ_PATH}})" == "$vbmc_ip" ]]